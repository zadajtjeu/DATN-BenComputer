# PHP CircleCI 2.0 configuration file
# See: https://circleci.com/docs/2.0/language-php/
version: 2

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.4-node-browsers
        environment:
          APP_ENV: testing
          DB_CONNECTION: mysql
          DB_DATABASE: laravel
          DB_USERNAME: user_test
          DB_PASSWORD: password_test

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      - image: circleci/mysql:8.0
        command: mysqld --default-authentication-plugin=mysql_native_password
        environment:
          MYSQL_USER: user_test
          MYSQL_DATABASE: laravel
          MYSQL_ROOT_PASSWORD: root
          MYSQL_PASSWORD: password_test
      #
      # - image: redis:2.8.19

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run: 
          name: Update Config
          command: |
            sudo apt update 
            composer require "squizlabs/php_codesniffer=*"
      - run:
          name: Install MySQL driver
          command: |
            sudo docker-php-ext-configure pdo_mysql --with-pdo-mysql=mysqlnd
            sudo docker-php-ext-install zip bcmath pdo_mysql

      # Download and cache dependencies

      # composer cache
      - restore_cache:
          keys:
          # "composer.json" can be used if "composer.json"
          # is not committed to the repository.
          - composer-v1-{{ checksum "composer.lock" }}
          # fallback to using the latest cache if no exact match is found
          - composer-v1-
      - run: composer install -n --prefer-dist
      - save_cache:
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
            - vendor
      # node cache
      - restore_cache:
          keys:
            - node-v4-{{ checksum "package.json" }}
            - node-v4-
      - run: npm install
      - save_cache:
          key: node-v4-{{ checksum "package.json" }}
          paths:
            - node_modules
            - ~/.yarn

      # prepare the database
      - run: 
          name: Finish Build
          command: |
            cp .env.example .env
            php artisan key:generate
            php artisan migrate --env=testing --database=mysql --force
            php artisan config:cache
            php artisan config:clear
            php artisan cache:clear

      # run tests
      - run:
          name: Test:phpcs
          command: |
            ./vendor/bin/phpcs --standard=PSR2,PSR1 app/
      - run:
          name: Test:phpunit
          command: |
            ./vendor/bin/phpunit --log-junit ~/phpunit/junit.xml --coverage-clover=~/phpunit/clover.xml --coverage-html=~/phpunit
          environment:
            XDEBUG_MODE: coverage
          when: always
      - store_test_results:
          path: ~/phpunit
      - store_artifacts:
          path: ~/phpunit
